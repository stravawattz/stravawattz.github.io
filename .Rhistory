# Layout details
layout(
shapes = list(list(type = "line", x0 = Sys.Date(), x1 = Sys.Date(), y0 = 0, y1 = 0.9, xref = "x", yref = "paper", line = list(color = "white", width = 0.5, dash = "dot"))),
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
xaxis = list(zeroline = FALSE, fixedrange = TRUE, tickformat = "%b", tickvals = seq(as.Date(paste0(target_year, "-01-01")), as.Date(paste0(target_year, "-12-31")), by = "month"), ticktext = format(seq(as.Date(paste0(target_year, "-01-01")), as.Date(paste0(target_year, "-12-31")), by = "month"), "%b"), color = "white", title = NA, gridcolor = rgb(0,0,0,0), gridwidth = 0.25),
yaxis  = list(zeroline = FALSE, fixedrange = TRUE, range = c(0, 1.15 * max(c(df$ATL, df$CTL), na.rm = TRUE)), color = "white", title = "ATL & CTL", gridcolor = "#333", gridwidth = 0.25),
legend = list(orientation = "h", x = 0.05, y = 1, font = list(color = "white")),
margin = list(l = 0, r = 0, t = 0, b = 0)
)
# Plot the ACWR values
plot_second <- df %>% plot_ly(x = ~date) |>
# ATLpct line  ── black, width 2 ≈ size 1 in ggplot
add_lines(y = ~ACWR,
name = "ACWR",
line = list(color = "#f1c40f", width = 2),
text = ~paste0("<b>", wday(date, label = TRUE, abbr = FALSE, week_start = 1), "<br>", format(as.Date(date), "%d/%m/%y"), "</b><br>ACWR: ", formatC(ACWR, format = "f", digits = 2)),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# Layout details
layout(
shapes = list(list(type = "line", x0 = Sys.Date(), x1 = Sys.Date(), y0 = 0, y1 = 1, xref = "x", yref = "paper", line = list(color = "white", width = 0.5, dash = "dot"))),
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
xaxis = list(zeroline = FALSE, fixedrange = TRUE, tickformat = "%b", tickvals = seq(as.Date(paste0(target_year, "-01-01")), as.Date(paste0(target_year, "-12-31")), by = "month"), ticktext = format(seq(as.Date(paste0(target_year, "-01-01")), as.Date(paste0(target_year, "-12-31")), by = "month"), "%b"), color = "white", title = NA, gridcolor = rgb(0,0,0,0), gridwidth = 0.25),
yaxis  = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = "ACWR", gridcolor = "#333", gridwidth = 0.25),
legend = list(orientation = "h", x = 0.05, y = 1, font = list(color = "white")),
margin = list(l = 0, r = 0, t = 0, b = 0)
)
# Plot the TRIMP values
plot_trimp <- df %>% plot_ly(x = ~date) |>
# ATLpct line  ── black, width 2 ≈ size 1 in ggplot
add_bars(y = ~TRIMP,
name = ~type,
type = 'bar',
color = ~type,
colors = type_colors,
text = ~paste0("<b>", toupper(sub(" TRIMP", "", type)), "</b><br>", wday(date, label = TRUE, abbr = FALSE, week_start = 1), "<br>", format(as.Date(date), "%d/%m/%y"), "<br>TRIMP: ", round(TRIMP, 0)),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# Layout details
layout(
shapes = list(list(type = "line", x0 = Sys.Date(), x1 = Sys.Date(), y0 = 0, y1 = 1, xref = "x", yref = "paper", line = list(color = "white", width = 0.5, dash = "dot"))),
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
xaxis = list(zeroline = FALSE, fixedrange = TRUE, tickformat = "%b", tickvals = seq(as.Date(paste0(target_year, "-01-01")), as.Date(paste0(target_year, "-12-31")), by = "month"), ticktext = format(seq(as.Date(paste0(target_year, "-01-01")), as.Date(paste0(target_year, "-12-31")), by = "month"), "%b"), color = "white", title = NA, gridcolor = rgb(0,0,0,0), gridwidth = 0.25),
yaxis  = list(range = c(1, max(df$TRIMP, na.rm = TRUE)), zeroline = FALSE, fixedrange = TRUE, color = "white", title = "TRIMP\n", gridcolor = "#333", gridwidth = 0.25),
legend = list(orientation = "h", x = 0.05, y = 1, font = list(color = "white")),
margin = list(l = 0, r = 0, t = 0, b = 0)
)
# Combine vertically
subplot(plot_main, plot_second, plot_trimp, nrows = 3, shareX = TRUE, titleY = TRUE, heights = c(0.5, 0.25, 0.25), margin = 0.025) %>%
layout(paper_bgcolor = "#2d2d2d")
}
# Create an empty list to store the plots
plots <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
plot_name <- paste0("plot_training_load_", year)
plots[[plot_name]] <- plot_training_load(df_all_distinct_tload, year)
}
# Save plots in the workspace
list2env(plots, envir = .GlobalEnv)
# ----------------------------------------- #
# ---- TRAINING LOAD GAUGE ---------------- #
# ----------------------------------------- #
plot_gauge_tload <- function(metric, df, target_year,
steps = 100,
palette = c("lightgreen", "yellow", "red", "darkred"),
hole   = 0.6,
font_size = 50,
background_color = rgb(0, 0, 0, 0.10)) {
#metric <- "ATL"
#df <- df_all_distinct_tload
#target_year <- 2023
#steps = 100
#palette = c("lightgreen", "yellow", "red", "darkred")
#hole   = 0.6
#font_size = 50
#background_color = rgb(0, 0, 0, 0.10)
# Determine date to be displayed
date_display <- as.Date(ifelse(year(Sys.Date()) == target_year, Sys.Date(), paste0(target_year, "-12-31")))
# Determine core value
value <- df %>% filter(year(date) == target_year) %>% filter(date == date_display) %>% pull(metric)
# Determine 0-100% value
percentage <- ifelse(metric == "ACWR",
df %>% filter(year(date) == target_year) %>% filter(date == date_display) %>% pull("ACWRpct"),
value / max(df %>% filter(year(date) == target_year) %>% pull(metric), na.rm = TRUE) * 100)
# Round off values
value_label <- formatC(value, format = "f", digits = ifelse(metric == "ACWR", 2, 0))
percentage_label <- paste0(formatC(percentage, format = "f", digits = 0), "%")
# Basic sanity checks
if (!is.numeric(percentage) || percentage < 0 || percentage > steps) {
stop("`value` must be between 0 and `steps` (", steps, ").", call. = FALSE)
}
# Right-side annotation
if (metric == "ATL") {
annot_text <- paste0(
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display-2) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display-1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#FFFFFF; font-size: 9px'><b>", sprintf("%.0f", df %>% filter(date == date_display) %>% pull(metric)), "</b></span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display+1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display+2) %>% pull(metric)), "</span>"
)} else if (metric == "CTL") {
annot_text <- paste0(
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display-2) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display-1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#FFFFFF; font-size: 9px'><b>", sprintf("%.0f", df %>% filter(date == date_display) %>% pull(metric)), "</b></span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display+1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display+2) %>% pull(metric)), "</span>"
)} else {
annot_text <- paste0(
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.2f", df %>% filter(date == date_display-2) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.2f", df %>% filter(date == date_display-1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#FFFFFF; font-size: 9px'><b>", sprintf("%.2f", df %>% filter(date == date_display) %>% pull(metric)), "</b></span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.2f", df %>% filter(date == date_display+1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.2f", df %>% filter(date == date_display+2) %>% pull(metric)), "</span>"
)}
# Build colour vectors
full_palette  <- colorRampPalette(palette)(steps)        # complete gradient
fill_colors   <- full_palette[seq_len(percentage)]            # part to show
transparent   <- "rgba(0,0,0,0)"                         # invisible slices
fg_colors     <- c(fill_colors, rep(transparent, steps - percentage))
# one unit per slice so ∑ = 360°
values  <- rep(1, steps)
labels  <- paste0("slice_", seq_len(steps))              # invisible
# Assemble plot
fig <- plot_ly() |>
# background donut (100 % light-gray)
add_pie(
labels      = labels,
values      = values,
hole        = hole,
sort        = FALSE,
direction   = "clockwise",
marker      = list(colors = rep(background_color, steps), line   = list(width = 0)),
textinfo    = "none",
hoverinfo   = "skip",
showlegend  = FALSE,
domain      = list(x = c(0, 0.80))
) |>
# foreground donut (partial gradient)
add_pie(
labels      = labels,
values      = values,
hole        = hole,
sort        = FALSE,
direction   = "clockwise",
marker      = list(colors = fg_colors, line   = list(width = 0)),
textinfo    = "none",
hoverinfo   = "skip",
showlegend  = FALSE,
domain      = list(x = c(0, 0.80))
) |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor = "#2d2d2d",
plot_bgcolor = "#2d2d2d",
annotations = list(
#list(x = 0.5 * 0.80, y = 0.5, text = paste0("<span style='color:#FFFFFF; font-size: 10px'>", value_label, "</span><br>", "<span style='color:#FFFFFF; font-size: 12px'><b>", metric, "</b></span><br>", "<span style='color:#FFFFFF; font-size: 10px'>(", percentage_label, ")</span>"), showarrow = FALSE),
list(x = 0.5 * 0.80, y = 0.5, text = paste0("<span style='color:#FFFFFF; font-size: 11px'>", value_label, "</span><br>", "<span style='color:#FFFFFF; font-size: 12px'><b>", metric, "</b></span>"), showarrow = FALSE),
list(x = 0.80, y = 0.5, text = annot_text, showarrow = FALSE, align = "center", xanchor = "left", yanchor = "middle", font = list(color = "white", size = 8), xref = "paper", yref = "paper")),
margin = list(l = 0, r = 0, b = 0, t = 0),
font = list(color = "white")
); fig
}
# Create an empty list to store the plots
plots <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
for (metric in c("ATL", "CTL", "ACWR")) {
plot_name <- paste0("plot_gauge_tload_", metric, "_", year)
plots[[plot_name]] <- plot_gauge_tload(metric, df_all_distinct_tload, year)
}}
# Save plots in the workspace
list2env(plots, envir = .GlobalEnv)
# ------------------------------------- #
# ---- TRAINING STATUS ---------------- #
# ------------------------------------- #
get_training_status <- function(df) {
# Extract today's row index
today_idx <- match(Sys.Date(), df$date)
# Extract today's ACWR
ACWR <- df$ACWR[today_idx]
# Define status based on conditions
status <- ifelse(ACWR < 0.80, "Recovery",
ifelse(ACWR <= 1.20, "Optimal",
ifelse(ACWR <= 1.33, "High", "Risk")))
return(status)
}
# Huidige training status
status_today <- get_training_status(df_all_distinct_tload)
# ----------------------------------------- #
# ---- TRAINING SUGGESTION ---------------- #
# ----------------------------------------- #
suggest_training_plan <- function(df, target_year) {
#df <- df_all_distinct_tload
#target_year <- 2025
if (target_year == year(Sys.Date())) {
today_acwr <- df %>% filter(date == Sys.Date()) %>% pull(ACWR)
tomorrow_acwr <- df %>% filter(date == Sys.Date()+1) %>% pull(ACWR)
} else {
today_acwr <- df %>% filter(date == as.Date(paste0(target_year, "-12-31"))) %>% pull(ACWR)
tomorrow_acwr <- df %>% filter(date == as.Date(paste0(target_year, "-12-31"))) %>% pull(ACWR)
}
rest_days <- case_when(
tomorrow_acwr > 2.0 ~ 3,
tomorrow_acwr > 1.5 ~ 2,
tomorrow_acwr > 1.1 ~ 1,
tomorrow_acwr <= 1.1 ~ 0
)
training_type <- case_when(
tomorrow_acwr > 1.1 ~ "Rest",
today_acwr <= 0.80 ~ "Aerobic",
today_acwr <= 1.00 ~ "Anerobic",
today_acwr < 1.2 ~ "Maintenance"
)
return(list(
acwr = today_acwr,
suggested_rest_days = rest_days,
suggested_training_type = training_type
))
}
# Create an empty list to store the results
results <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
results_name <- paste0("suggest_training_plan_", year)
results[[results_name]] <- suggest_training_plan(df_all_distinct_tload, year)
}
# Save results in the workspace
list2env(results, envir = .GlobalEnv)
# -------------------------------------------- #
# ---- EXPECTED TRAINING LOAD ---------------- #
# -------------------------------------------- #
plot_acwr_projection <- function(df, tminus, target_year) {
#df <- df_all_distinct_tload
#tminus <- 0
#target_year <- 2025
if (target_year < year(Sys.Date())) {plot_ly() |> layout(title = list(text = "No prediction data available", x = 0.5, y = 0.5, xanchor = "center", font = list(size = 12, color = "white")), paper_bgcolor = "#2d2d2d", plot_bgcolor = "#2d2d2d", xaxis = list(visible = FALSE), yaxis = list(visible = FALSE))
} else {
# Time and hr parameters
duration_range = seq(0, 125, by = 0.5)
hr_range = seq(120, 190, by = 0.5)
# Constants for ATL and CTL decay
kATL <- exp(-1 / 7)
kCTL <- exp(-1 / 42)
# Target date
target_date <- Sys.Date() - 1 + tminus
# Get ATL/CTL values on that day
base_data <- df %>% filter(date == target_date)
latest_atl <- base_data$ATL
latest_ctl <- base_data$CTL
# Create grid of scenarios
grid <- expand.grid(duration = duration_range, hr = hr_range)
# TRIMP calculation
grid$hr_percentage <- (grid$hr - personal_rest_hr) / (personal_max_hr - personal_rest_hr)
grid$TRIMP <- (grid$duration) * grid$hr_percentage * 0.64 * exp(1.92 * grid$hr_percentage)
# Get TRIMP of T0 if available
activity_TRIMP_today <- df %>% filter(date == target_date + 1) %>% pull(TRIMP)
# Add this to grid of expected TRIMP values
grid$TRIMP <- grid$TRIMP + activity_TRIMP_today
# ATL/CTL updates after simulated workout
grid$ATL_new <- grid$TRIMP + kATL * (latest_atl - grid$TRIMP)
grid$CTL_new <- grid$TRIMP + kCTL * (latest_ctl - grid$TRIMP)
grid$ACWR <- round(grid$ATL_new / grid$CTL_new, 2)
# Prepare matrix for heatmap
acwr_matrix <- acast(grid, duration ~ hr, value.var = "ACWR")
# Plot
plot_ly(
x = as.character(hr_range),
y = duration_range,
z = pmin(acwr_matrix, 5),
zmin = 0,
zmax = 5,
type = "heatmap",
showscale = FALSE,
colorscale = list(
list(0.00/5, "black"),
list(0.80/5, "#9b59b6"),
list(0.95/5, "#f1c40f"),
list(1.00/5, "yellow"),
list(1.05/5, "#f1c40f"),
list(1.20/5, "#e74c3c"),
list(2.50/5, "black"),
list(5.00/5, "black")
),
text = outer(
1:nrow(acwr_matrix),
1:ncol(acwr_matrix),
Vectorize(function(i, j) {
paste0(
"<b>HR</b>: ", formatC(hr_range[j], format = "f", digits = 0), " BPM",
"<br><b>Time</b>: ", formatC(duration_range[i], format = "f", digits = 0), " min",
"<br><b>ACWR</b>: ", formatC(acwr_matrix[i, j], format = "f", digits = 2)
)
})
),
hoverinfo = 'text', opacity = 0.97) %>%
#add_trace(contours = list(start = 0.8, end = 0.8, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
#add_trace(contours = list(start = 0.9, end = 0.9, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
add_trace(contours = list(start = 1, end = 1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.5), width = 1.0), showscale = FALSE) |>
#add_trace(contours = list(start = 1.1, end = 1.1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
#add_trace(contours = list(start = 1.2, end = 1.2, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
layout(showlegend = FALSE,
shapes = list(list(type = "line", x0 = hr2, x1 = hr2, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr3, x1 = hr3, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr4, x1 = hr4, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr5, x1 = hr5, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot"))),
annotations = list(
list(x = hr2-((hr2-hr1)/2), y = 120, text = paste0("<i>Zone 1</i>\n~", hr2-((hr2-hr1)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr3-((hr3-hr2)/2), y = 120, text = paste0("<i>Zone 2</i>\n~", hr3-((hr3-hr2)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr4-((hr4-hr3)/2), y = 120, text = paste0("<i>Zone 3</i>\n~", hr4-((hr4-hr3)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr5-((hr5-hr4)/2), y = 120, text = paste0("<i>Zone 4</i>\n~", hr5-((hr5-hr4)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = 190-((190-hr5)/2), y = 120, text = paste0("<i>Zone 5</i>\n~", 190-((190-hr5)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle")
)
) %>%
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor = "#2d2d2d",
plot_bgcolor = "#2d2d2d",
xaxis = list(tickfont = list(size=10, color="white"), title = NA, visible = TRUE, showticklabels = TRUE, fixedrange = TRUE, ticksuffix = " BPM", ticks = "", tickvals = c(138, 150, 164, 175), gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="white"), fixedrange = TRUE, ticksuffix = " min ", title = NA, visible = TRUE, showticklabels = TRUE, tickvals = c(20, 40, 60, 80, 100, 120),  ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0),
font = list(color = "white")
)
}
}
# Create an empty list to store the plots
plots <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
for (tminus in 0:3) {
plot_name <- paste0("plot_acwr_projection_", tminus, "_", year)
plots[[plot_name]] <- plot_acwr_projection(df_all_distinct_tload, tminus, year)
}}
# Save plots in the workspace
list2env(plots, envir = .GlobalEnv)
# -------------------------------------------- #
# ---- END OF SCRIPT EFFIENCY ---------------- #
# -------------------------------------------- #
# ============================================== #
# ============================================== #
# ---- END OF DATA MANIPULATION ---------------- #
# ============================================== #
# ============================================== #
# Save last date of update
last_date_of_update <- Sys.Date()
# Clean global environment
suppressWarnings({rm(plots, plot_name, sport, year,
STRAVA_CLIENT_ID, STRAVA_CLIENT_SECRET,
plot_calendar_daily_sport, plot_calendar_weekly_sport, plot_calendar_monthly_sport,
plot_distance_sport, plot_time_sport, plot_elevation_sport, plot_pace_sport, plot_speed_sport, plot_hr_sport,
plot_trimp_sport, plot_cumul_distance_sport, plot_cumul_time_sport, plot_cumul_elevation_sport,
plot_map_sep_sport, plot_map_heat_sport, serie, i, kATL, kCTL, TRIMP_temp,
get_training_status,
suggest_training_plan,
plot_training_load,
plot_gauge_tload,
plot_acwr_projection,
results_name, results,
tminus, metric, hr1, hr2, hr3, hr4, hr5,
personal_max_hr, personal_rest_hr)})
# Set WD
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Save data
save.image(file = "stravawattz.RData")
# =========================================== #
# =========================================== #
# ---- GENERATE ANNUAL QMD'S ---------------- #
# =========================================== #
# =========================================== #
# Loop through all the .qdm files
for (i in c("home.qmd", "running.qmd", "cycling.qmd", "swimming.qmd", "training.qmd")) {
# Set WD to the source folder
setwd("/Users/emmanueldockx/Dropbox/GitHub/_sources_for_stravawattz")
# Read the QMD file
qmd_lines <- readLines(i)
# Find the line number where "# 2025" is mentioned
start_2025 <- grep("^# 2025", qmd_lines)
if (length(start_2025) == 0) stop(paste("No '# 2025' found in", i))
# Copy the 2025 block
block_2025 <- qmd_lines[start_2025:length(qmd_lines)]
# Initialize the new content with the original lines
new_qmd <- qmd_lines
# Loop through years and generate blocks
for (yr in seq((as.numeric(format(Sys.Date(), "%Y")) - 1), first_year_of_the_dasboard)) {
block_new <- gsub("2025", as.character(yr), block_2025)
new_qmd <- c(new_qmd, "", block_new)
}
# Set WD to the destination folder
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Write modified content
writeLines(new_qmd, i)
}
# =================================== #
# =================================== #
# ---- QUARTO RENDER ---------------- #
# =================================== #
# =================================== #
# Set WD
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Render the Quarto dashboard
#quarto::quarto_render(".")
quarto::quarto_render("home.qmd")
quarto::quarto_render("running.qmd")
quarto::quarto_render("cycling.qmd")
quarto::quarto_render("swimming.qmd")
quarto::quarto_render("training.qmd")
# Timout until render is complete
Sys.sleep(5)
# ========================================= #
# ========================================= #
# ---- POST HOC HTML EDITS ---------------- #
# ========================================= #
# ========================================= #
# Add last update date/time
for (file in list.files(path = "docs/", pattern = "\\.html$", full.names = TRUE, recursive = FALSE)) {
content <- readLines(file, warn = FALSE)
content <- gsub("Last update: XXXXXXXXXX", paste0("<i>Last update: ", substr(Sys.Date(), 9, 10), "/", substr(Sys.Date(), 6, 7), "/", substr(Sys.Date(), 3, 4), " at ", substr(Sys.time(), 12, 16), "</i>"), content)
writeLines(content, file)
}
# ==================================== #
# ==================================== #
# ---- PUSH TO GITHUB ---------------- #
# ==================================== #
# ==================================== #
# Initialize Git
system("git init")
# Set file size limit
system("git config http.postBuffer 524288000")
# Add all files
system("git add .")
# Commit changes
system("git commit -m 'publication'")
# Push changes
system("git push")
# Open website
browseURL("docs/home.html")
# Write data to clipboard
write_clip(df_all_distinct_tload %>% filter(date >= Sys.Date()-42 & date <= Sys.Date()) %>% select(date, TRIMP, time, hr, ATL, CTL, ACWR))
# End of script efficiency
} else {cat("No new training load calculations needed")}
# Load packages
suppressPackageStartupMessages({
library(dplyr)
library(jsonlite)
library(httr)
library(ggplot2)
library(stringr)
library(tidyr)
library(purrr)
library(lubridate)
library(leaflet)
library(DT)
library(plotly)
library(openmeteo)
library(RColorBrewer)
library(clipr)
library(scales)
library(reshape2)
library(sf)
})
# Prepare global environment
rm(list = ls(all = TRUE))
# Set WD
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Load existing data
load("stravawattz.RData")
# Determine first and last year of data
first_year_of_the_dasboard <- 2023
last_year_of_the_dasboard <- year(Sys.Date())
# Determine personal hr parameters
personal_max_hr <- 188
personal_rest_hr <- 64
hr1 <- 120
hr2 <- 138
hr3 <- 150
hr4 <- 162
hr5 <- 174
# Initialize counters
counter_datafound <- nrow(df_all_distinct)
counter_processedtoday <- last_date_of_update
# Print message
cat("Packages and data are loaded\n")
# Save last date of update
last_date_of_update <- Sys.Date()-1
# Clean global environment
suppressWarnings({rm(plots, plot_name, sport, year,
STRAVA_CLIENT_ID, STRAVA_CLIENT_SECRET,
plot_calendar_daily_sport, plot_calendar_weekly_sport, plot_calendar_monthly_sport,
plot_distance_sport, plot_time_sport, plot_elevation_sport, plot_pace_sport, plot_speed_sport, plot_hr_sport,
plot_trimp_sport, plot_cumul_distance_sport, plot_cumul_time_sport, plot_cumul_elevation_sport,
plot_map_sep_sport, plot_map_heat_sport, serie, i, kATL, kCTL, TRIMP_temp,
get_training_status,
suggest_training_plan,
plot_training_load,
plot_gauge_tload,
plot_acwr_projection,
results_name, results,
tminus, metric, hr1, hr2, hr3, hr4, hr5,
personal_max_hr, personal_rest_hr)})
# Set WD
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Save data
save.image(file = "stravawattz.RData")
