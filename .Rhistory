margin = list(l = 0, r = 0, t = 0, b = 0)
)
# Combine vertically
subplot(plot_main, plot_second, plot_trimp, nrows = 3, shareX = TRUE, titleY = TRUE, heights = c(0.5, 0.25, 0.25), margin = 0.025) %>%
layout(paper_bgcolor = "#2d2d2d")
}
# Create an empty list to store the plots
plots <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
plot_name <- paste0("plot_training_load_", year)
plots[[plot_name]] <- plot_training_load(df_all_distinct_tload, year)
}
# Save plots in the workspace
list2env(plots, envir = .GlobalEnv)
# ----------------------------------------- #
# ---- TRAINING LOAD GAUGE ---------------- #
# ----------------------------------------- #
plot_gauge_tload <- function(metric, df, target_year,
steps = 100,
palette = c("lightgreen", "yellow", "red", "darkred"),
hole   = 0.6,
font_size = 50,
background_color = rgb(0, 0, 0, 0.10)) {
#metric <- "ATL"
#df <- df_all_distinct_tload
#target_year <- 2023
#steps = 100
#palette = c("lightgreen", "yellow", "red", "darkred")
#hole   = 0.6
#font_size = 50
#background_color = rgb(0, 0, 0, 0.10)
# Determine date to be displayed
date_display <- as.Date(ifelse(year(Sys.Date()) == target_year, Sys.Date(), paste0(target_year, "-12-31")))
# Determine core value
value <- df %>% filter(year(date) == target_year) %>% filter(date == date_display) %>% pull(metric)
# Determine 0-100% value
percentage <- ifelse(metric == "ACWR",
df %>% filter(year(date) == target_year) %>% filter(date == date_display) %>% pull("ACWRpct"),
value / max(df %>% filter(year(date) == target_year) %>% pull(metric), na.rm = TRUE) * 100)
# Round off values
value_label <- formatC(value, format = "f", digits = ifelse(metric == "ACWR", 2, 0))
percentage_label <- paste0(formatC(percentage, format = "f", digits = 0), "%")
# Basic sanity checks
if (!is.numeric(percentage) || percentage < 0 || percentage > steps) {
stop("`value` must be between 0 and `steps` (", steps, ").", call. = FALSE)
}
# Right-side annotation
if (metric == "ATL") {
annot_text <- paste0(
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display-2) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display-1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#FFFFFF; font-size: 9px'><b>", sprintf("%.0f", df %>% filter(date == date_display) %>% pull(metric)), "</b></span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display+1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display+2) %>% pull(metric)), "</span>"
)} else if (metric == "CTL") {
annot_text <- paste0(
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display-2) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display-1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#FFFFFF; font-size: 9px'><b>", sprintf("%.0f", df %>% filter(date == date_display) %>% pull(metric)), "</b></span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.0f", df %>% filter(date == date_display+1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.0f", df %>% filter(date == date_display+2) %>% pull(metric)), "</span>"
)} else {
annot_text <- paste0(
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.2f", df %>% filter(date == date_display-2) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.2f", df %>% filter(date == date_display-1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#FFFFFF; font-size: 9px'><b>", sprintf("%.2f", df %>% filter(date == date_display) %>% pull(metric)), "</b></span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 8px'>", sprintf("%.2f", df %>% filter(date == date_display+1) %>% pull(metric)), "</span>\n", "<span style='color:#AAAAAA'>↓</span>\n",
"<span style='color:#AAAAAA; font-size: 7px'>", sprintf("%.2f", df %>% filter(date == date_display+2) %>% pull(metric)), "</span>"
)}
# Build colour vectors
full_palette  <- colorRampPalette(palette)(steps)        # complete gradient
fill_colors   <- full_palette[seq_len(percentage)]            # part to show
transparent   <- "rgba(0,0,0,0)"                         # invisible slices
fg_colors     <- c(fill_colors, rep(transparent, steps - percentage))
# one unit per slice so ∑ = 360°
values  <- rep(1, steps)
labels  <- paste0("slice_", seq_len(steps))              # invisible
# Assemble plot
fig <- plot_ly() |>
# background donut (100 % light-gray)
add_pie(
labels      = labels,
values      = values,
hole        = hole,
sort        = FALSE,
direction   = "clockwise",
marker      = list(colors = rep(background_color, steps), line   = list(width = 0)),
textinfo    = "none",
hoverinfo   = "skip",
showlegend  = FALSE,
domain      = list(x = c(0, 0.80))
) |>
# foreground donut (partial gradient)
add_pie(
labels      = labels,
values      = values,
hole        = hole,
sort        = FALSE,
direction   = "clockwise",
marker      = list(colors = fg_colors, line   = list(width = 0)),
textinfo    = "none",
hoverinfo   = "skip",
showlegend  = FALSE,
domain      = list(x = c(0, 0.80))
) |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor = "#2d2d2d",
plot_bgcolor = "#2d2d2d",
annotations = list(
#list(x = 0.5 * 0.80, y = 0.5, text = paste0("<span style='color:#FFFFFF; font-size: 10px'>", value_label, "</span><br>", "<span style='color:#FFFFFF; font-size: 12px'><b>", metric, "</b></span><br>", "<span style='color:#FFFFFF; font-size: 10px'>(", percentage_label, ")</span>"), showarrow = FALSE),
list(x = 0.5 * 0.80, y = 0.5, text = paste0("<span style='color:#FFFFFF; font-size: 11px'>", value_label, "</span><br>", "<span style='color:#FFFFFF; font-size: 12px'><b>", metric, "</b></span>"), showarrow = FALSE),
list(x = 0.80, y = 0.5, text = annot_text, showarrow = FALSE, align = "center", xanchor = "left", yanchor = "middle", font = list(color = "white", size = 8), xref = "paper", yref = "paper")),
margin = list(l = 0, r = 0, b = 0, t = 0),
font = list(color = "white")
); fig
}
# Create an empty list to store the plots
plots <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
for (metric in c("ATL", "CTL", "ACWR")) {
plot_name <- paste0("plot_gauge_tload_", metric, "_", year)
plots[[plot_name]] <- plot_gauge_tload(metric, df_all_distinct_tload, year)
}}
# Save plots in the workspace
list2env(plots, envir = .GlobalEnv)
# ------------------------------------- #
# ---- TRAINING STATUS ---------------- #
# ------------------------------------- #
get_training_status <- function(df) {
# Extract today's row index
today_idx <- match(Sys.Date(), df$date)
# Extract today's ACWR
ACWR <- df$ACWR[today_idx]
# Define status based on conditions
status <- ifelse(ACWR < 0.80, "Recovery",
ifelse(ACWR <= 1.05, "Light",
ifelse(ACWR <= 1.20, "Optimal",
ifelse(ACWR <= 1.33, "High", "Risk"))))
return(status)
}
# Huidige training status
status_today <- get_training_status(df_all_distinct_tload)
# ----------------------------------------- #
# ---- TRAINING SUGGESTION ---------------- #
# ----------------------------------------- #
suggest_training_plan <- function(df, target_year) {
if (target_year == year(Sys.Date())) {today_acwr <- df %>% filter(date == Sys.Date()) %>% pull(ACWR)} else {today_acwr <- df %>% filter(date == as.Date(paste0(target_year, "-12-31"))) %>% pull(ACWR)}
if (length(today_acwr) == 0 || is.na(today_acwr)) {
return("No ACWR data for today.")
}
rest_days <- case_when(
today_acwr < 0.8 ~ 0,
today_acwr >= 0.8 & today_acwr <= 1.3 ~ 0,
today_acwr > 1.3 & today_acwr <= 1.5 ~ 1,
today_acwr > 1.5 ~ 2
)
training_type <- case_when(
today_acwr < 0.8 ~ "Base",
today_acwr >= 0.8 & today_acwr <= 1.0 ~ "Anaerobic",
today_acwr > 1.0 & today_acwr <= 1.3 ~ "Aerobic",
today_acwr > 1.3 & today_acwr <= 1.5 ~ "Recovery",
today_acwr > 1.5 ~ "No training"
)
return(list(
acwr = today_acwr,
suggested_rest_days = rest_days,
suggested_training_type = training_type
))
}
# Create an empty list to store the results
results <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
results_name <- paste0("suggest_training_plan_", year)
results[[results_name]] <- suggest_training_plan(df_all_distinct_tload, year)
}
# Save results in the workspace
list2env(results, envir = .GlobalEnv)
# -------------------------------------------- #
# ---- EXPECTED TRAINING LOAD ---------------- #
# -------------------------------------------- #
plot_acwr_projection <- function(df, tminus, target_year) {
#df <- df_all_distinct_tload
#tminus <- 0
#target_year <- 2025
if (target_year < year(Sys.Date())) {plot_ly() |> layout(title = list(text = "No prediction data available", x = 0.5, y = 0.5, xanchor = "center", font = list(size = 12, color = "white")), paper_bgcolor = "#2d2d2d", plot_bgcolor = "#2d2d2d", xaxis = list(visible = FALSE), yaxis = list(visible = FALSE))
} else {
# Time and hr parameters
duration_range = seq(0, 125, by = 1)
hr_range = seq(120, 190, by = 1)
# Constants for ATL and CTL decay
kATL <- exp(-1 / 7)
kCTL <- exp(-1 / 42)
# Target date
target_date <- Sys.Date() - 1 + tminus
# Get ATL/CTL values on that day
base_data <- df %>% filter(date == target_date)
if (nrow(base_data) == 0) {
stop("No ATL/CTL data available for date: ", target_date)
}
latest_atl <- base_data$ATL
latest_ctl <- base_data$CTL
# Create grid of scenarios
grid <- expand.grid(duration = duration_range, hr = hr_range)
# TRIMP calculation
grid$hr_percentage <- (grid$hr - personal_rest_hr) / (personal_max_hr - personal_rest_hr)
grid$TRIMP <- (grid$duration) * grid$hr_percentage * 0.64 * exp(1.92 * grid$hr_percentage)
# ATL/CTL updates after simulated workout
grid$ATL_new <- grid$TRIMP + kATL * (latest_atl - grid$TRIMP)
grid$CTL_new <- grid$TRIMP + kCTL * (latest_ctl - grid$TRIMP)
grid$ACWR <- round(grid$ATL_new / grid$CTL_new, 2)
# Prepare matrix for heatmap
acwr_matrix <- acast(grid, duration ~ hr, value.var = "ACWR")
# Plot
plot_ly(
x = as.character(hr_range),
y = duration_range,
z = pmin(acwr_matrix, 5),
zmin = 0,
zmax = 5,
type = "heatmap",
showscale = FALSE,
colorscale = list(
list(0.00, "#9b59b6"),
list(0.16, "#9b59b6"),
list(0.20, "#f1c40f"),
list(0.24, "#e74c3c"),
list(1.00, "black")
),
text = outer(
1:nrow(acwr_matrix),
1:ncol(acwr_matrix),
Vectorize(function(i, j) {
paste0(
"<b>HR</b>: ", formatC(hr_range[j], format = "f", digits = 0), " BPM",
"<br><b>Time</b>: ", formatC(duration_range[i], format = "f", digits = 0), " min",
"<br><b>ACWR</b>: ", formatC(acwr_matrix[i, j], format = "f", digits = 2)
)
})
),
hoverinfo = 'text', opacity = 0.97) %>%
#add_trace(contours = list(start = 0.8, end = 0.8, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
#add_trace(contours = list(start = 0.9, end = 0.9, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
add_trace(contours = list(start = 1, end = 1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.5), width = 1.0), showscale = FALSE) |>
#add_trace(contours = list(start = 1.1, end = 1.1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
#add_trace(contours = list(start = 1.2, end = 1.2, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
layout(showlegend = FALSE,
shapes = list(list(type = "line", x0 = hr2, x1 = hr2, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr3, x1 = hr3, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr4, x1 = hr4, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr5, x1 = hr5, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot"))),
annotations = list(
list(x = hr2-((hr2-hr1)/2), y = 120, text = paste0("<i>Zone 1</i>\n~", hr2-((hr2-hr1)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr3-((hr3-hr2)/2), y = 120, text = paste0("<i>Zone 2</i>\n~", hr3-((hr3-hr2)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr4-((hr4-hr3)/2), y = 120, text = paste0("<i>Zone 3</i>\n~", hr4-((hr4-hr3)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr5-((hr5-hr4)/2), y = 120, text = paste0("<i>Zone 4</i>\n~", hr5-((hr5-hr4)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = 190-((190-hr5)/2), y = 120, text = paste0("<i>Zone 5</i>\n~", 190-((190-hr5)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle")
)
) %>%
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor = "#2d2d2d",
plot_bgcolor = "#2d2d2d",
xaxis = list(tickfont = list(size=10, color="white"), title = NA, visible = TRUE, showticklabels = TRUE, fixedrange = TRUE, ticksuffix = " BPM", ticks = "", tickvals = c(138, 150, 164, 175), gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="white"), fixedrange = TRUE, ticksuffix = " min ", title = NA, visible = TRUE, showticklabels = TRUE, tickvals = c(20, 40, 60, 80, 100, 120),  ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0),
font = list(color = "white")
)
}
}
# Create an empty list to store the plots
plots <- list()
# Loop through all years to generate calendars
for (year in first_year_of_the_dasboard:last_year_of_the_dasboard) {
for (tminus in 0:5) {
plot_name <- paste0("plot_acwr_projection_", tminus, "_", year)
plots[[plot_name]] <- plot_acwr_projection(df_all_distinct_tload, tminus, year)
}}
# Save plots in the workspace
list2env(plots, envir = .GlobalEnv)
# Plot
plot_ly(
x = as.character(hr_range),
y = duration_range,
z = pmin(acwr_matrix, 5),
zmin = 0,
zmax = 5,
type = "heatmap",
showscale = FALSE,
colorscale = list(
list(0.00, "#9b59b6"),
list(0.16, "#9b59b6"),
list(0.20, "#f1c40f"),
list(0.24, "#e74c3c"),
list(1.00, "black")
),
text = outer(
1:nrow(acwr_matrix),
1:ncol(acwr_matrix),
Vectorize(function(i, j) {
paste0(
"<b>HR</b>: ", formatC(hr_range[j], format = "f", digits = 0), " BPM",
"<br><b>Time</b>: ", formatC(duration_range[i], format = "f", digits = 0), " min",
"<br><b>ACWR</b>: ", formatC(acwr_matrix[i, j], format = "f", digits = 2)
)
})
),
hoverinfo = 'text', opacity = 0.97) %>%
#add_trace(contours = list(start = 0.8, end = 0.8, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
#add_trace(contours = list(start = 0.9, end = 0.9, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
add_trace(contours = list(start = 1, end = 1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.5), width = 1.0), showscale = FALSE) |>
#add_trace(contours = list(start = 1.1, end = 1.1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
#add_trace(contours = list(start = 1.2, end = 1.2, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
layout(showlegend = FALSE,
shapes = list(list(type = "line", x0 = hr2, x1 = hr2, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr3, x1 = hr3, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr4, x1 = hr4, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr5, x1 = hr5, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot"))),
annotations = list(
list(x = hr2-((hr2-hr1)/2), y = 120, text = paste0("<i>Zone 1</i>\n~", hr2-((hr2-hr1)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr3-((hr3-hr2)/2), y = 120, text = paste0("<i>Zone 2</i>\n~", hr3-((hr3-hr2)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr4-((hr4-hr3)/2), y = 120, text = paste0("<i>Zone 3</i>\n~", hr4-((hr4-hr3)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr5-((hr5-hr4)/2), y = 120, text = paste0("<i>Zone 4</i>\n~", hr5-((hr5-hr4)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = 190-((190-hr5)/2), y = 120, text = paste0("<i>Zone 5</i>\n~", 190-((190-hr5)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle")
)
) %>%
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor = "#2d2d2d",
plot_bgcolor = "#2d2d2d",
xaxis = list(tickfont = list(size=10, color="white"), title = NA, visible = TRUE, showticklabels = TRUE, fixedrange = TRUE, ticksuffix = " BPM", ticks = "", tickvals = c(138, 150, 164, 175), gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="white"), fixedrange = TRUE, ticksuffix = " min ", title = NA, visible = TRUE, showticklabels = TRUE, tickvals = c(20, 40, 60, 80, 100, 120),  ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0),
font = list(color = "white")
)
df <- df_all_distinct_tload
tminus <- 0
target_year <- 2025
# Time and hr parameters
duration_range = seq(0, 125, by = 1)
hr_range = seq(120, 190, by = 1)
# Constants for ATL and CTL decay
kATL <- exp(-1 / 7)
kCTL <- exp(-1 / 42)
# Target date
target_date <- Sys.Date() - 1 + tminus
# Get ATL/CTL values on that day
base_data <- df %>% filter(date == target_date)
if (nrow(base_data) == 0) {
stop("No ATL/CTL data available for date: ", target_date)
}
latest_atl <- base_data$ATL
latest_ctl <- base_data$CTL
# Create grid of scenarios
grid <- expand.grid(duration = duration_range, hr = hr_range)
# TRIMP calculation
grid$hr_percentage <- (grid$hr - personal_rest_hr) / (personal_max_hr - personal_rest_hr)
grid$TRIMP <- (grid$duration) * grid$hr_percentage * 0.64 * exp(1.92 * grid$hr_percentage)
# ATL/CTL updates after simulated workout
grid$ATL_new <- grid$TRIMP + kATL * (latest_atl - grid$TRIMP)
grid$CTL_new <- grid$TRIMP + kCTL * (latest_ctl - grid$TRIMP)
grid$ACWR <- round(grid$ATL_new / grid$CTL_new, 2)
# Prepare matrix for heatmap
acwr_matrix <- acast(grid, duration ~ hr, value.var = "ACWR")
# Plot
plot_ly(
x = as.character(hr_range),
y = duration_range,
z = pmin(acwr_matrix, 5),
zmin = 0,
zmax = 5,
type = "heatmap",
showscale = FALSE,
colorscale = list(
list(0.00, "#9b59b6"),
list(0.16, "#9b59b6"),
list(0.20, "#f1c40f"),
list(0.24, "#e74c3c"),
list(1.00, "black")
),
text = outer(
1:nrow(acwr_matrix),
1:ncol(acwr_matrix),
Vectorize(function(i, j) {
paste0(
"<b>HR</b>: ", formatC(hr_range[j], format = "f", digits = 0), " BPM",
"<br><b>Time</b>: ", formatC(duration_range[i], format = "f", digits = 0), " min",
"<br><b>ACWR</b>: ", formatC(acwr_matrix[i, j], format = "f", digits = 2)
)
})
),
hoverinfo = 'text', opacity = 0.97) %>%
#add_trace(contours = list(start = 0.8, end = 0.8, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
#add_trace(contours = list(start = 0.9, end = 0.9, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
add_trace(contours = list(start = 1, end = 1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.5), width = 1.0), showscale = FALSE) |>
#add_trace(contours = list(start = 1.1, end = 1.1, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.50), width = 0.5), showscale = FALSE) |>
#add_trace(contours = list(start = 1.2, end = 1.2, coloring = "none"), x = as.character(hr_range), y = duration_range, z = acwr_matrix, type = "contour", line = list(color = rgb(1, 1, 1, 0.25), width = 0.25), showscale = FALSE) |>
layout(showlegend = FALSE,
shapes = list(list(type = "line", x0 = hr2, x1 = hr2, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr3, x1 = hr3, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr4, x1 = hr4, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot")),
list(type = "line", x0 = hr5, x1 = hr5, y0 = min(duration_range), y1 = max(duration_range), line = list(color = rgb(1, 1, 1, 0.5), width = 1, dash = "dot"))),
annotations = list(
list(x = hr2-((hr2-hr1)/2), y = 120, text = paste0("<i>Zone 1</i>\n~", hr2-((hr2-hr1)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr3-((hr3-hr2)/2), y = 120, text = paste0("<i>Zone 2</i>\n~", hr3-((hr3-hr2)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr4-((hr4-hr3)/2), y = 120, text = paste0("<i>Zone 3</i>\n~", hr4-((hr4-hr3)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = hr5-((hr5-hr4)/2), y = 120, text = paste0("<i>Zone 4</i>\n~", hr5-((hr5-hr4)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle"),
list(x = 190-((190-hr5)/2), y = 120, text = paste0("<i>Zone 5</i>\n~", 190-((190-hr5)/2), " BPM"), showarrow = FALSE, font = list(color = rgb(1, 1, 1, 0.75), size = 10), xanchor = "center", yanchor = "middle")
)
) %>%
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor = "#2d2d2d",
plot_bgcolor = "#2d2d2d",
xaxis = list(tickfont = list(size=10, color="white"), title = NA, visible = TRUE, showticklabels = TRUE, fixedrange = TRUE, ticksuffix = " BPM", ticks = "", tickvals = c(138, 150, 164, 175), gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="white"), fixedrange = TRUE, ticksuffix = " min ", title = NA, visible = TRUE, showticklabels = TRUE, tickvals = c(20, 40, 60, 80, 100, 120),  ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0),
font = list(color = "white")
)
# Load packages
suppressPackageStartupMessages({
library(dplyr)
library(jsonlite)
library(httr)
library(ggplot2)
library(stringr)
library(tidyr)
library(purrr)
library(lubridate)
library(leaflet)
library(DT)
library(plotly)
library(openmeteo)
library(RColorBrewer)
library(clipr)
library(scales)
library(reshape2)
library(sf)
})
# Prepare global environment
rm(list = ls(all = TRUE))
# Determine first and last year of data
first_year_of_the_dasboard <- 2023
last_year_of_the_dasboard <- year(Sys.Date())
# Determine personal hr parameters
personal_max_hr <- 188
personal_rest_hr <- 64
hr1 <- 120
hr2 <- 138
hr3 <- 150
hr4 <- 162
hr5 <- 174
# Set WD
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Load existing data
load("stravawattz.RData")
paste0("Last update: ", substr(Sys.Date(), 9, 10), "/", substr(Sys.Date(), 6, 7), "/", substr(Sys.Date(), 3, 4), " at ", substr(Sys.time(), 12, 16))
# Last-minute HTML changes
for (file in list.files(path = "docs/", pattern = "\\.html$", full.names = TRUE, recursive = FALSE)) {
content <- readLines(file, warn = FALSE)
content <- gsub("Last update: XXXXXXXXXX", paste0("<i>Last update: ", substr(Sys.Date(), 9, 10), "/", substr(Sys.Date(), 6, 7), "/", substr(Sys.Date(), 3, 4), " at ", substr(Sys.time(), 12, 16), "</i>"), content)
writeLines(content, file)
}
# Set WD
setwd("/Users/emmanueldockx/Dropbox/GitHub/stravawattz.github.io")
# Render the Quarto dashboard
#quarto::quarto_render(".")
quarto::quarto_render("home.qmd")
quarto::quarto_render("running.qmd")
quarto::quarto_render("cycling.qmd")
quarto::quarto_render("swimming.qmd")
quarto::quarto_render("training.qmd")
# Timout until render is complete
Sys.sleep(5)
# Last-minute HTML changes
for (file in list.files(path = "docs/", pattern = "\\.html$", full.names = TRUE, recursive = FALSE)) {
content <- readLines(file, warn = FALSE)
content <- gsub("Last update: XXXXXXXXXX", paste0("<i>Last update: ", substr(Sys.Date(), 9, 10), "/", substr(Sys.Date(), 6, 7), "/", substr(Sys.Date(), 3, 4), " at ", substr(Sys.time(), 12, 16), "</i>"), content)
writeLines(content, file)
}
# Open website
browseURL("docs/home.html")
# Render the Quarto dashboard
#quarto::quarto_render(".")
quarto::quarto_render("home.qmd")
# Open website
browseURL("docs/home.html")
# Render the Quarto dashboard
#quarto::quarto_render(".")
quarto::quarto_render("home.qmd")
# Render the Quarto dashboard
#quarto::quarto_render(".")
quarto::quarto_render("home.qmd")
# Add last update date/time
for (file in list.files(path = "docs/", pattern = "\\.html$", full.names = TRUE, recursive = FALSE)) {
content <- readLines(file, warn = FALSE)
content <- gsub("Last update: XXXXXXXXXX", paste0("<i>Last update: ", substr(Sys.Date(), 9, 10), "/", substr(Sys.Date(), 6, 7), "/", substr(Sys.Date(), 3, 4), " at ", substr(Sys.time(), 12, 16), "</i>"), content)
writeLines(content, file)
}
# Open website
browseURL("docs/home.html")
